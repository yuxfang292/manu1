import jsPDF from 'jspdf';

export interface SummaryData {
  reportId: string;
  createdDate: string;
  selectedExtracts: any[];
  overview: string;
  keyPoints: string[];
  conclusion: string;
}

export function generatePDF(data: SummaryData) {
  const doc = new jsPDF();
  let yPosition = 20;
  
  // Add company branding and header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('Research Summary', 20, yPosition);
  yPosition += 15;
  
  // Add report metadata
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  doc.text(`Report ID: ${data.reportId}`, 20, yPosition);
  yPosition += 8;
  doc.text(`Generated: ${data.createdDate}`, 20, yPosition);
  yPosition += 20;
  
  // Overview section
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Overview', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  const overviewLines = doc.splitTextToSize(data.overview, 170);
  doc.text(overviewLines, 20, yPosition);
  yPosition += (overviewLines.length * 5) + 15;
  
  // Check if we need a new page
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }
  
  // Key Points section
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Key Points', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  
  data.keyPoints.forEach((point, index) => {
    // Check if we need a new page
    if (yPosition > 270) {
      doc.addPage();
      yPosition = 20;
    }
    
    // Add numbered point
    doc.setFont('helvetica', 'bold');
    doc.text(`${index + 1}.`, 20, yPosition);
    doc.setFont('helvetica', 'normal');
    
    const cleanPoint = point.replace(/^[â€¢\d+\.\s]*/, ''); // Remove existing bullets/numbers
    const pointLines = doc.splitTextToSize(cleanPoint, 160);
    doc.text(pointLines, 30, yPosition);
    yPosition += (pointLines.length * 5) + 5;
  });
  
  yPosition += 10;
  
  // Check if we need a new page for conclusion
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }
  
  // Conclusion section
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Conclusion', 20, yPosition);
  yPosition += 10;
  
  doc.setFontSize(11);
  doc.setFont('helvetica', 'normal');
  const conclusionLines = doc.splitTextToSize(data.conclusion, 170);
  doc.text(conclusionLines, 20, yPosition);
  yPosition += (conclusionLines.length * 5) + 20;
  
  // Sources section if we have extracts
  if (data.selectedExtracts && data.selectedExtracts.length > 0) {
    // Check if we need a new page
    if (yPosition > 250) {
      doc.addPage();
      yPosition = 20;
    }
    
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text(`Sources (${data.selectedExtracts.length} extracts)`, 20, yPosition);
    yPosition += 10;
    
    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    
    data.selectedExtracts.forEach((extract, index) => {
      // Check if we need a new page
      if (yPosition > 270) {
        doc.addPage();
        yPosition = 20;
      }
      
      doc.setFont('helvetica', 'bold');
      doc.text(`${index + 1}. ${extract.title}`, 20, yPosition);
      yPosition += 5;
      
      doc.setFont('helvetica', 'normal');
      doc.text(`Source: ${extract.source}`, 25, yPosition);
      yPosition += 4;
      doc.text(`Category: ${extract.category} | Jurisdiction: ${extract.jurisdiction}`, 25, yPosition);
      yPosition += 10;
    });
  }
  
  // Footer
  const pageCount = doc.getNumberOfPages();
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.setFontSize(8);
    doc.setFont('helvetica', 'normal');
    doc.text(`Generated by Regulatory Compliance Explorer | Page ${i} of ${pageCount}`, 20, 285);
  }
  
  // Save the PDF
  doc.save(`research-summary-${data.reportId}.pdf`);
}
